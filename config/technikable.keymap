/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

&lt { quick_tap_ms = <200>; };

/ {
    chosen { zmk,matrix_transform = &ortho_transform; };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
&kp GRAVE  &kp Q  &kp W  &kp F       &kp P        &kp B                   &kp J       &kp L  &kp U      &kp Y    &kp SEMICOLON  &kp BSLH
&kp ESC    &kp A  &kp R  &kp S       &kp T        &kp G                   &kp M       &kp N  &kp E      &kp I    &kp O          &kp SQT
&kp MINUS  &kp Z  &kp X  &kp C       &kp D        &kp V                   &kp K       &kp H  &kp COMMA  &kp DOT  &kp FSLH       &kp EQUAL
                  &none  &lt 1 BSPC  &lt 2 SPACE  &lt 3 TAB  &lt 4 ENTER  &kp RSHIFT  &mo 5  &none
            >;
        };

        f_layer {
            label = "Fun";
            bindings = <
&kp HOME    &kp PG_UP  &kp F7  &kp F8  &kp F9  &kp F10          &trans  &trans     &trans      &trans    &trans     &none
&kp END     &kp PG_DN  &kp F4  &kp F5  &kp F6  &kp F11          &trans  &kp RCTRL  &kp RALT    &kp RGUI  &kp RSHFT  &trans
&kp DELETE  &kp INS    &kp F1  &kp F2  &kp F3  &kp F12          &trans  &none      &none       &none     &none      &trans
                       &trans  &trans  &trans  &trans   &trans  &trans  &trans     &sys_reset
            >;
        };

        nav_layer {
            label = "nav";
            bindings = <
&kp C_PLAY_PAUSE  &kp C_PREV  &kp C_NEXT  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_MUTE           &kp J      &kp L     &kp U     &kp Y   &kp SEMI   &kp BSLH
&kp ESC           &kp LSHFT   &kp LGUI    &kp LALT      &kp LCTRL        &kp RET              &kp J      &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp SQT
&kp BSPC          &kp LEFT    &kp DOWN    &kp UP        &kp RIGHT        &kp TAB              &kp M      &kp N     &kp E     &kp I   &kp O      &kp EQUAL
                              &none       &kp BSPC      &trans           &kp TAB     &kp RET  &kp RSHFT  &none     &none
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp N7  &kp N8    &kp N9     &kp MINUS            &none      &trans  &trans  &trans  &trans  &trans
&kp SLASH         &kp ASTERISK       &kp N4  &kp N5    &kp N6     &kp PLUS             &none      &trans  &trans  &trans  &trans  &trans
&kp BSPC          &kp N0             &kp N1  &kp N2    &kp N3     &kp PERIOD           &trans     &trans  &trans  &trans  &trans  &trans
                                     &none   &kp BSPC  &kp SPACE  &trans      &kp RET  &kp RSHFT  &none   &trans
            >;
        };

        mod_layer {
            bindings = <
&kp GRAVE  &kp Q  &kp W   &kp F     &kp P      &kp B            &trans     &trans     &trans    &trans    &trans     &trans
&kp ESC    &kp A  &kp R   &kp S     &kp T      &kp G            &trans     &kp RCTRL  &kp RALT  &kp RGUI  &kp RSHFT  &trans
&kp MINUS  &kp Z  &kp X   &kp C     &kp D      &kp V            &trans     &trans     &trans    &trans    &trans     &trans
                  &trans  &kp BSPC  &kp SPACE  &kp TAB  &trans  &kp RSHFT  &trans     &trans
            >;
        };

        sym_layer {
            bindings = <
&kp GRAVE  &kp LS(EXCL)   &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)          &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp SEMI  &kp LS(COLON)  &kp BSLH
&kp ESC    &kp N1         &kp N2        &kp N3         &kp N4        &kp N5                 &kp N6         &kp N7        &kp N8        &kp N9    &kp N0         &kp SQT
&kp MINUS  &kp LS(UNDER)  &kp LS(LBRC)  &kp LS(RBRC)   &kp LBKT      &kp LS(LPAR)           &kp LS(RPAR)   &kp RBKT      &kp COMMA     &kp DOT   &kp FSLH       &kp EQUAL
                          &trans        &kp BSPC       &kp SPACE     &kp TAB        &trans  &trans         &trans        &trans
            >;
        };
    };
};
